# Инструкция по работе с Git
Перед началом работы с Git, необходимо установить его с сайта https://git-scm.com/download/win. Помимо этого, нужно установить Visual Studio Code с сайта https://code.visualstudio.com/download. При загрузке данных программ все параметры можно оставлять по умолчанию.  
После того, как все установлено, открываем VS Code и нажимаем Open Folder, после чего выбираем папку с данными для нашего репозитория.
![Начало работы](../Снимок1.PNG)
Дальше необходимо открыть терминал, куда будут вводиться все команды, связанные с Git. Открыть терминал можно на панели сверху.
![](../Снимок2.PNG)
Снизу появилась область, в которой можно вводить команды.  
**Итак, приступим к началу работы с Git.**  
Для того, чтобы убедиться, что Git корректно установлен, можно ввести команду Git version. В результате напишется версия установленного Git.  
Далее необходимо задать имя пользователя и email для того, чтобы можно было выполнять коммиты репозитория (сохранение изменений). Используем команды git config --global user.name “Username” и git config --global user.email “email@mail[]().ru” соответственно.
![](../Снимок3.PNG)
Для инициализации репозитория прописываем команду git init. Нам выдаёт сообщение о том, что репозиторий создан. При этом в нашей папке, в которую мы зашли раннее, создаётся скрытая папка с данными о репозитории. 






































***
## **Список основных команд**
***
## Подготовка рабочего места
* git config --global user.[]()name "Username" - задаём имя пользователя для коммитов.
* git config --global user.email "email@mail[]().ru" - задаём email для коммитов.
* git version - покажет версию Git, которая установлена.
## Инициализация репозитория
* git init - инициализация репозитория.
* git add \<filename> - добавить файл в репозиторий.
* git add . - добавляет все файлы в репозиторий.
* git status - отображает состояние директории, показывает, если файл не отслеживается Git.
## Ветки в Git
* git branch \<name> - создаёт новую ветку.
* git checkout \<name> - переходит на заданную ветку.
* git merge \<name> - слияет указанную ветку с основной.
##### Возможные конфликты слияния
* Выполнение команды слияния прерывается в самом начале, если Git обнаруживает изменения в рабочем каталоге или разделе проиндексированных файлов текущего проекта. Git не может выполнить слияние, поскольку иначе эти ожидающие изменения будут перезаписаны новыми коммитами.  
**Решение:** локальное состояние необходимо стабилизировать с помощью команд git stash, git checkout, git commit или git reset.
* Сбой В ПРОЦЕССЕ слияния говорит о наличии конфликта между текущей локальной веткой и веткой, с которой выполняется слияние. Это свидетельствует о конфликте с кодом другого разработчика. Git сделает все возможное, чтобы объединить файлы, но оставит конфликтующие участки, чтобы вы разрешили их вручную.  
**Решение:** в этом случае нам нужно изменить конфликтующие файлы вручную.
## История коммитов и работа с коммитами
* git log - отображает историю коммитов с изменениями.
* git log --graph - отображает дерево зависимостей для всех коммитов.
* git log --oneline - отображает коммиты в одну строку (только хэш и сообщение).
* git log --oneline --stat - отображает статистику изменённых файлов для каждого коммита, при этом в одну строку.
* git diff - отображает разницу между любыми двумя Git деревьями (коммиты, например).
* git commit -a -m "text" - записывает изменения в репозиторий и автоматически добавляет все измененные файлы в индекс.
* git commit -m "text" - записывает изменения в репозиторий.
* git commit --amend -m "text" - записывает изменения последнего коммита.
## Работа с удаленным репозиторием
* git remote add \<shortname> \<url> - добавляет удалённый репозиторий и присваивает ему имя.
* git push \<remote-name> \<branch-name> - отправляет изменения (имя ветки) на сервер.